import http from "../http-common"; // Import de l'instance HTTP configur√©e

class CommandeService {
    // üî∏ Gestion des erreurs
    handleError(error) {
        if (error.response) {
            const errorCode = error.response.status;
            const errorDetails = error.response.data;

            console.log("Code d'erreur HTTP:", errorCode);
            console.log("D√©tails de l'erreur:", errorDetails);

            if (errorCode === 401) {
                throw new Error("Token invalide ou expir√©. Veuillez vous reconnecter.");
            } else if (errorCode === 403) {
                throw new Error("Acc√®s refus√©. Vous n'avez pas les permissions n√©cessaires.");
            } else if (errorCode === 404) {
                throw new Error("Commande non trouv√©e.");
            } else {
                throw new Error(`Erreur serveur: ${errorCode}`);
            }
        } else {
            throw new Error("Probl√®me de connexion. Veuillez r√©essayer plus tard.");
        }
    }

    // üîπ R√©cup√©rer toutes les commandes
    async getAll() {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) throw new Error("Token non trouv√©. Veuillez vous connecter.");

        try {
            const response = await http.get("/commandes", {
                headers: { Authorization: `Bearer ${authToken}` },
            });
            console.log("Toutes les commandes r√©cup√©r√©es avec succ√®s !");
            return response.data;
        } catch (error) {
            this.handleError(error);
        }
    }

    // üîπ R√©cup√©rer les commandes par client (trackingId client)
    async getByClient(clientTrackingId) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) throw new Error("Token non trouv√©. Veuillez vous connecter.");

        try {
            const response = await http.get(`/commandes/client/${clientTrackingId}`, {
                headers: { Authorization: `Bearer ${authToken}` },
            });
            console.log("Commandes du client r√©cup√©r√©es avec succ√®s !");
            return response.data;
        } catch (error) {
            this.handleError(error);
        }
    }

    // üîπ R√©cup√©rer une commande par trackingId
    async get(trackingId) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) throw new Error("Token non trouv√©. Veuillez vous connecter.");

        try {
            const response = await http.get(`/commandes/${trackingId}`, {
                headers: { Authorization: `Bearer ${authToken}` },
            });
            console.log("Commande r√©cup√©r√©e avec succ√®s !");
            return response.data;
        } catch (error) {
            this.handleError(error);
        }
    }

    // üîπ Cr√©er une commande
    async create(data) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) throw new Error("Token non trouv√©. Veuillez vous connecter.");

        try {
            const response = await http.post("/commandes", data, {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`,
                },
            });
            console.log("Commande cr√©√©e avec succ√®s !");
            return response.data;
        } catch (error) {
            this.handleError(error);
        }
    }

    // üîπ Mettre √† jour une commande
    async update(trackingId, data) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) throw new Error("Token non trouv√©. Veuillez vous connecter.");

        try {
            const response = await http.put(`/commandes/${trackingId}`, data, {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    Authorization: `Bearer ${authToken}`,
                },
            });
            console.log("Commande mise √† jour avec succ√®s !");
            return response.data;
        } catch (error) {
            this.handleError(error);
        }
    }

    // üîπ Supprimer une commande
    async delete(trackingId) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) throw new Error("Token non trouv√©. Veuillez vous connecter.");

        try {
            await http.delete(`/commandes/${trackingId}`, {
                headers: { Authorization: `Bearer ${authToken}` },
            });
            console.log("Commande supprim√©e avec succ√®s !");
        } catch (error) {
            this.handleError(error);
        }
    }
}

export default new CommandeService();
